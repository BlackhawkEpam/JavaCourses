package com.epam.maksim_iashkov.java.lesson1;

import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * Класс, реализующий обработку слов
 * Слово - последовательность символов без внутренних пробелов
 *
 * @author Maksim_Iashkov
 * @version 19.03.2020
 */
public class WordProcessing {
    public String[] words;
    Scanner scanner = new Scanner(System.in);   //Инициализация сканнера

    /*Конструктор для массива words, хранящего введенные слова*/
    public WordProcessing() {
        this.words = inputWords();
    }

    /**
     * Метод, считывающий одно слово с консоли в строковый массив
     */
    public void addWord(String[] words, int i) {
        words[i] = scanner.nextLine().trim();
    }

    /**
     * Метод считывания слов из консоли в массив
     */
    private String[] inputWords() {
        int n;                  //Количество слов
        String[] words;         //Массив для хранения слов

        System.out.println("Введите количество слов:");
        try {
            n = scanner.nextInt();      //Считываем с консоли количество слов
            if (n < 1) throw new IllegalArgumentException("Количество слов должно быть больше 0!");
        } catch (InputMismatchException exc) {
            System.out.println("Некорректно введено значение количества слов!");
            return null;
        } catch (IllegalArgumentException ex) {
            System.out.println(ex.getMessage());
            return null;
        }
        scanner.nextLine();
        words = new String[n];          //Объявляем строковый массив, в котором будут храниться слова

        /*блок ввода слов в массив из консоли*/
        for (int i = 0; i < n; i++) {
            System.out.print("Введите слово номер " + (i + 1) + ": ");
            addWord(words, i);
            if (!(words[i].length() == words[i].replaceAll(" ", "").length())) {
                System.out.println("Была введена строка, а не слово! Введите слово заново");
                System.out.print("Введите слово номер " + (i + 1) + ": ");
                addWord(words, i);   //Если слово не одно - повторить ввод слова заново
            } else if (words[i].trim().length() == 0) {
                System.out.println("Была введена пустая строка! Введите слово заново");
                System.out.print("Введите слово номер " + (i + 1) + ": ");
                addWord(words, i);   //Если был сразу нажат enter или введены только пробелы - повторить ввод
            }
        }
        return words;
    }

    /**
     * Метод поиска слов, состоящих только из цифр (если их больше 1 - вывод второго найденного)
     */
    public void onlyNumbers() {

        System.out.println("----------------------------------------"); //Разделитель между строками и результатом
        int count = 0;      //Счетчик количества чаров = цифре
        int seq = 0;        //Счетчик количества искомых слов, подходящих под условия
        char[] numbers = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};    //Массив цифр, с которым будут сравниваться чары слов
        if (words == null) {        //Проверка, что массив слов не null
            return;
        }
        String[] result = new String[words.length];     //Инициализация результирующего массива искомых слов

        /*Цикл проверки каждого слова из входного массива*/
        for (String word : words) {
            char[] strChar = word.toCharArray();        //Разбиения слова на чары

            /*Циклы проверки: для каждого чара слова сравнить с каждой из 10 цифр*/
            for (char c : strChar) {
                for (char number : numbers) {
                    if (c == number) {
                        count++;    //Если чар = цифра - увеличить счетчик
                    }
                }
            }
            if (count == strChar.length) {      //Если количество совпадений чаров с цифрой = длине слова - оно искомое
                result[seq] = word;         //Добавление искомого слова в результирующий массив
                seq++;                      //Увеличить счетчик искомых слов
            }
            count = 0;      //Обнуление счетчика для следующего чара
        }

        if (seq == 0) {     //Если слов не нашлось - оповестить об этом пользователя
            System.out.println("Среди введённых слов отсутствуют искомые!");
        } else if (seq == 1) {      //Если искомое слово одно - вывести его в консоль
            System.out.println("Слово " + result[0] + " состоит только из цифр!");
        } else {        //Если искомых слов несколько - вывести второе из них
            System.out.println("Слово " + result[1] + " состоит только из цифр!");
        }
    }

    /**
     * Метод поиска слова, состоящего только из различных символов (первое из найденных)
     */
    public void differentSymbols() {

        System.out.println("----------------------------------------"); //Разделитель между строками и результатом
        int count = 0;              //Кол-во повторений символа в слове
        int unique = 1;             //Кол-во уникальных символов в слове. По умолчанию такой есть хотя бы 1
        if (words == null) {        //Проверка, что массив слов не null
            return;
        }

        /*Цикл проверки каждого слова из входного массива*/
        for (int k = 0; k < words.length; k++) {
            if (words[k].length() == 1) {   //Если встречное слово состоит из одной буквы - оно по умолчанию подходит под условие
                System.out.println("Слово " + words[k] + " состоит только из уникальных символов!");
                break;
            }
            char[] strChar = words[k].toCharArray();                    //Разбиения слова на чары

            /*Цикл проверки каждого чара в текущем слове*/
            for (int i = 0; i < strChar.length - 1; i++) {
                for (int j = i + 1; j < strChar.length; j++) {      //Сравниваем каждый чар с остальными в слове
                    if (strChar[i] == strChar[j]) {
                        count++;            //Если чар совпадает с каким-либо другим - инкрементируем счетчик
                        if (count > 0) {
                            break;          //Если найден совпадающий чар - выходим из цикла, он уже не уникальный
                        }
                    }
                }
                if (count == 0) {
                    unique++;               //Если чар ни с кем не совпадаем - инкрементируем кол-во уникальных символов в слове
                }
                count = 0;                  //Обнуляем счетчик для следующего чара
            }
            if (unique == strChar.length) {     //Если в конце проверки число юников = числу символов - слово подходит под условие
                System.out.println("Слово " + words[k] + " состоит только из уникальных символов!");
                break;
            }
            unique = 1;                     //Возвращаем кол-во уников на исходную позицию для следующего слова
            if (k == words.length - 1) {    //Если мы дошли до последнего слова и оно не уникально - выводим оповещение
                System.out.println("Среди введённых слов отсутствуют искомые!");
                break;
            }
        }
    }

    /**
     * Метод поиска слова с наименьшим уникальным количеством символов (первого из найденных)
     */
    public void minUnique() {

        System.out.println("----------------------------------------"); //Разделитель между строками и результатом
        int count = 0;          //Кол-во повторений символа в слове
        int unique = 1;         //Кол-во уникальных символов в слове. По умолчанию такой есть хотя бы 1
        if (words == null) {    //Проверка, что массив слов не null
            return;
        }
        String result = words[0];           //Инициализация искомого слова
        int minUniq = words[0].length();    //Минимальное количество уникальных символов

        /*Цикл проверки каждого слова: разбиваем его на чары*/
        for (String word : words) {
            char[] strChar = word.toCharArray();

            /*Цикл проверки каждого чара в каждом слове*/
            for (int i = 0; i < strChar.length - 1; i++) {
                for (int j = i + 1; j < strChar.length; j++) {  //Сравниваем каждый чар с остальными в слове
                    if (strChar[i] == strChar[j]) {
                        count++;    //Если чар совпадает с каким-либо другим - инкрементируем счетчик
                        if (count > 0) {
                            break;          //Если найден совпадающий чар - выходим из цикла, он уже не уникальный
                        }
                    }
                }
                if (count == 0) {
                    unique++;           //Если чар ни с кем не совпадаем - инкрементируем кол-во уникальных символов в слове
                }
                count = 0;              //Обнуляем счетчик для следующего чара
            }
            if (unique < minUniq) {     //Ищем слово, в котором количество уников меньше, чем было до проверки
                result = word;
                minUniq = unique;
            }
            unique = 1;             //Возвращаем кол-во уников на исходную позицию для следующего слова
        }
        System.out.println("Слово с наименьшим количеством уникальных символов: " + result);    //Вывод искомого слова
    }
}